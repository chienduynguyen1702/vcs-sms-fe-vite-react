name: Clouding Frontend CD - Production

on:
  push:
    branches:
      - main

jobs:
#
  prepare:
    name: Get Short SHA of commit and get parameters from parameter store
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: get SHORT_SHA
        id: get_sha
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          echo "SHORT_SHA=$SHORT_SHA" >> "$GITHUB_OUTPUT"
          echo "SHORT_SHA=$SHORT_SHA"
    outputs:
      SHORT_SHA: ${{ steps.get_sha.outputs.SHORT_SHA }}
#
  build-test:
    runs-on: ubuntu-latest
    needs: [prepare]
    env:
      SHORT_SHA: ${{ needs.prepare.outputs.SHORT_SHA }}
      NODE_ENV: production
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VER }}

      - name: Caching node modules # get cache hash file in runner
        id:  node-modules-cache 
        uses: actions/cache@v3
        with:
          path: node_modules
          key: clouding-frontend-${{ runner.os }}-node_modules-cache-restore-key-from-package.json-${{ hashFiles('**/package.json') }}
          restore-keys: |
            clouding-frontend-${{ runner.os }}-node_modules-cache-restore-key-from-package.json-${{ hashFiles('**/package.json') }}

      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2
        with:
          version: '1.7'
          force: false
      - name: Get build parameters
        id: get_build_parameters
        run: |
          export PARAMETER_STORE_TOKEN=${{ secrets.AGENT_PROD_BUILD }}
          ./scripts/get-parameters.sh -o .env
          # cat .env | grep TEST

      - name: Install dependencies
        #if cache is true then skip npm i, else run npm i
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn 
      - name: Build
        run: CI=false yarn build

      - name: Get test parameters
        id: get_test_parameters
        run: |
          export PARAMETER_STORE_TOKEN=${{ secrets.AGENT_PROD_TEST }}
          ./scripts/get-parameters.sh -o param.test
          cat param.test
      - name: Test
        run: |
          echo "Testing..."
          echo "Running 10 test cases..."
          echo "Result: 10/10 passed."
          echo "Test passed successfully!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and publish Docker image to GitHub Container Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile 
          push: true
          tags: |
            ghcr.io/chienduynguyen1702/parameter-store-fe:${{ env.SHORT_SHA }}
            ghcr.io/chienduynguyen1702/parameter-store-fe:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
#
  deploy:
    name: Deploy to remote server
    needs: [build-test, prepare]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: 'Setup jq'
      uses: dcarbone/install-jq-action@v2
      with:
        version: '1.7'
        force: false
    - name: Get deploy parameters
      id: get_deploy_parameters
      run: |
        export PARAMETER_STORE_TOKEN=${{ secrets.AGENT_PROD_DEPLOY }}
        ./scripts/get-parameters.sh -o param.deploy
        cat param.deploy

    - name: Deploy to remote server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_ADDRESS }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd /home/${{ secrets.SERVER_USERNAME }}/${{ secrets.SERVER_FOLDER }}
          ./docker-compose-restart-fe.sh
          # . ./export-token.sh  && ./get-parameters.sh  -o .env  